name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cleanup to free up space
        run: |
          # 이전 Docker 이미지 삭제
          echo 'Removing old Docker images...' &&
          docker rmi $(docker images -q) || true

          # npm 캐시 정리
          echo 'Cleaning npm cache...' &&
          npm cache clean --force || true

          # 작업 디렉토리에서 node_modules 삭제
          echo 'Removing node_modules...' &&
          rm -rf node_modules

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest .

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > keypair.pem
          chmod 600 keypair.pem

      - name: Deploy to EC2
        run: |
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          # Navigate to your project directory
          cd /home/ubuntu/TravelPlan &&  # 프로젝트 디렉토리로 이동
          git pull origin main --no-rebase &&  # 최신 코드 가져오기

          # Docker Hub 로그인
          sudo docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' -p '${{ secrets.DOCKER_HUB_PASSWORD }}' &&
          echo 'Pulling the latest Docker image...' &&
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest &&

          # 사용하지 않는 Docker 객체 삭제
          echo 'Cleaning up unused Docker images and volumes...' &&
          sudo docker system prune -a --volumes -f &&

          # 현재 app_blue가 실행 중일 때 app_green 시작
          if [ \$(sudo docker ps -q --filter 'name=app_blue') ]; then
            echo 'Starting new container app_green...' &&
            sudo docker-compose -f /home/ubuntu/TravelPlan/docker-compose.green.yml up -d &&
            echo 'Container app_green started.' &&
            echo 'Modifying Nginx to point to app_green...' &&
            sudo sed -i 's/proxy_pass http:\/\/app_blue:3000;/proxy_pass http:\/\/app_green:3001;/' /etc/nginx/nginx.conf &&
            sudo sed -i 's/proxy_pass http:\/\/app_blue:3000;/proxy_pass http:\/\/app_green:3001;/' /etc/nginx/sites-enabled/default &&
            sudo nginx -t &&
            sudo systemctl reload nginx &&
            echo 'Old container app_blue stopped and removed.' &&
            sudo docker stop app_blue &&
            sudo docker rm app_blue
          else
            echo 'Starting new container app_blue...' &&
            sudo docker-compose -f /home/ubuntu/TravelPlan/docker-compose.blue.yml up -d &&
            echo 'Container app_blue started.' &&
            echo 'Modifying Nginx to point to app_blue...' &&
            sudo sed -i 's/proxy_pass http:\/\/app_green:3001;/proxy_pass http:\/\/app_blue:3000;/' /etc/nginx/nginx.conf &&
            sudo sed -i 's/proxy_pass http:\/\/app_green:3001;/proxy_pass http:\/\/app_blue:3000;/' /etc/nginx/sites-enabled/default &&
            sudo nginx -t &&
            sudo systemctl reload nginx &&
            echo 'Old container app_green stopped and removed.' &&
            sudo docker stop app_green &&
            sudo docker rm app_green
          fi
          "
